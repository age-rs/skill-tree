digraph g {
graph [ rankdir = "LR" ];
node [ fontsize="16", shape = "ellipse" ];
edge [ ];
"legend" [
  label = <<table>
    <tr><td bgcolor="red" port="all" colspan="2">Legend</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">Unassigned</td></tr>
    <tr><td bgcolor="cornsilk">⌚</td><td bgcolor="cornsilk"><i><font color="lightgrey">Blocked</font></i></td></tr>
    <tr><td bgcolor="cornsilk">🛠️</td><td bgcolor="cornsilk">Assigned / In-progress</td></tr>
    <tr><td bgcolor="cornsilk">☑️</td><td bgcolor="cornsilk"><s>Complete</s></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"align-rustc-predicate" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Align rustc predicates with chalk predicates</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">isolate Binder into a Forall goal</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">introduce Implication</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">introduce Forall goals with types</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"recursive-solver" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Experiment with a recursive chalk solver</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">write-up the idea that Niko had</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">build prototype and evaluate</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"rust-analyzer-integration" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Integrate with rust-analyzer</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">How to model impl Trait</td></tr>
    <tr><td bgcolor="cornsilk" port="_askfor_in">🙋</td><td fontcolor="red" bgcolor="cornsilk" port="_askfor_out">Ensure that we never need to ask for impls of unknown types</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">Deal with performance problems</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">Deal with memory usage</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"syntactic-semantic-equality" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Separate syntactic equality from semantic equality</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"map-chalk-types-to-rustc-types" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2" href="http://example.org">Map chalk types to rustc types</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">Move Identifier to TypeFamily</td></tr>
    <tr><td bgcolor="cornsilk" port="_debruijn_in">🙋</td><td fontcolor="red" bgcolor="cornsilk" port="_debruijn_out">Adapt rutsc's debruijn index model</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">Remove all vectors, boxes</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">Make intern methods take &amp;self</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"rustc-integration-mvp" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Integrate chalk-solve into rustc</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">remove old chalk support</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">create</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"syntactic-semantic-equality":all -> "rust-analyzer-integration":_askfor_in;
"map-chalk-types-to-rustc-types":_debruijn_out -> "syntactic-semantic-equality":all;
"map-chalk-types-to-rustc-types":all -> "rustc-integration-mvp":all;
}
